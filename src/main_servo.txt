#include "freertos/FreeRTOS.h"
#include "driver/uart.h"
#include "driver/gpio.h"
#include "freertos/queue.h"
#include "freertos/task.h"
#include "sdkconfig.h"
#include "stdio.h"
#include "stdlib.h"
#include "ctype.h"
#include "string.h"
#include "driver/ledc.h"
#include "freertos/semphr.h"

#define BUF_SIZE                (1024)
#define SERVOBASE_1             4
#define SERVOBASEARM_2          5
#define SERVOTOPARM_3           18

#define LEDC_TIMER              LEDC_TIMER_0
#define LEDC_MODE               LEDC_LOW_SPEED_MODE

#define LEDC_CHANNEL_0          LEDC_CHANNEL_0
#define LEDC_CHANNEL_1          LEDC_CHANNEL_1
#define LEDC_CHANNEL_2          LEDC_CHANNEL_2
#define LEDC_DUTY_RES           LEDC_TIMER_13_BIT // Set duty resolution to 13 bits
#define LEDC_DUTY               (4095) // Set duty to 50%. ((2 ** 13) - 1) * 50% = 4095
#define LEDC_FREQUENCY          (50) // Frequency in Hertz. 
#define LEDC_NUM                (3)





//input tasks
void task_1_baseservo(int pwm_position);



static xTaskHandle taskhandle_1_baseservo;


float baseServo_instr = 0;



void app_main() {
    //setting up outputs

    uart_config_t uart_config = {
        .baud_rate = 9600,
        .data_bits = UART_DATA_8_BITS,
        .parity    = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE,
        .source_clk = UART_SCLK_APB,
    };
    ESP_ERROR_CHECK(uart_driver_install(UART_NUM_0, 2*1024, 0, 0, NULL, 0));
    ESP_ERROR_CHECK(uart_param_config(UART_NUM_0, &uart_config));
  


    // Prepare and then apply the LEDC PWM timer configuration
    ledc_timer_config_t ledc_timer = {
        .speed_mode       = LEDC_MODE,
        .timer_num        = LEDC_TIMER,
        .duty_resolution  = LEDC_DUTY_RES,
        .freq_hz          = LEDC_FREQUENCY,  // Set output frequency at 5 kHz
        .clk_cfg          = LEDC_AUTO_CLK
    };
    ESP_ERROR_CHECK(ledc_timer_config(&ledc_timer));

    // Prepare and then apply the LEDC PWM channel configuration
    ledc_channel_config_t ledc_channel[LEDC_NUM] = {
        {
            .speed_mode     = LEDC_MODE,
            .channel        = LEDC_CHANNEL_0,
            .timer_sel      = LEDC_TIMER,
            .intr_type      = LEDC_INTR_DISABLE,
            .gpio_num       = SERVOBASE_1,
            .duty           = 0, // Set duty to 0%
            .hpoint         = 0
 
        },

        {
            .speed_mode     = LEDC_MODE,
            .channel        = LEDC_CHANNEL_1,
            .timer_sel      = LEDC_TIMER,
            .intr_type      = LEDC_INTR_DISABLE,
            .gpio_num       = SERVOBASEARM_2,
            .duty           = 0, // Set duty to 0%
            .hpoint         = 0

        },
        {
            .speed_mode     = LEDC_MODE,
            .channel        = LEDC_CHANNEL_2,
            .timer_sel      = LEDC_TIMER,
            .intr_type      = LEDC_INTR_DISABLE,
            .gpio_num       = SERVOTOPARM_3,
            .duty           = 0, // Set duty to 0%
            .hpoint         = 0

        },

      
    };
    for (int ch = 0; ch < LEDC_NUM; ch++) {
        ledc_channel_config(&ledc_channel[ch]);
    }

    task_1_baseservo(7);
    vTaskDelay(5000 / portTICK_PERIOD_MS);
    // Install UART driver using an event queue here
    printf("\nstarting  the main loop \n");
    printf("\n");
    printf("\n");
    printf("\n");
    printf("\n");
    

        // xTaskCreate(task_1_baseservo,"function for base servo",2024,NULL,3,&taskhandle_1_baseservo);

}

void task_1_baseservo(int pwm_position){
    printf("hi i am servo base\n");
    vTaskDelay(1000 / portTICK_RATE_MS);
  
    ledc_set_duty(LEDC_MODE, LEDC_CHANNEL_0, (8191 * pwm_position) / 100);
    ledc_update_duty(LEDC_MODE, LEDC_CHANNEL_0);
    printf("base servo  set to  : %d\n",pwm_position);
    vTaskDelay(1000 / portTICK_PERIOD_MS);
}



